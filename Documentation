This is documentation for the suite of programs I am writing.

FUTURE IMPROVEMENTS as of Jan 8 2019:

1) Could add a FULL list of the columns + their descriptions to the bottom
of each of the files for the Lv0-related FITS files.
2) For the Lv0 functions, change the function description to add more
representative variables. Currently, I am just using event_cl as an example.

################################## LEVEL 0 ####################################

Base level - obtaining data and then binning them

>>>>>>>>>> Lv0_dirs <<<<<<<<<<

Functions:

##### global_par
-- Defining global variables for the directories
-- has BASE_DIR and NICER_DATADIR

>>>>>>>>>> Lv0_obsid_info <<<<<<<<<<

Functions:

##### obstime(obsid)

-- Returns a list showing observation start and end times for a desired ObsID

obsid - Observation ID of the object of interest (10-digit str)

#####

>>>>>>>>>> Lv0_call_eventcl <<<<<<<<<<

Functions:

##### open_fits(obsid,bary)

-- Opening the FITS file for the cleaned event file

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False

##### get_eventcl(obsid,bary,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, times, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_eventcl('0034070101',True,['PI_FAST','TIME'])) [WORKED]

>>>>>>>>>> Lv0_call_ufa <<<<<<<<<<

Functions:

##### open_fits(obsid,mpu_no)

-- Opening the FITS file for the ufa event file

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs. str!!
MPU number 7 corresponds to the COMBINED file!

##### get_ufa(obsid,mpu_no,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, times, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs.
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_ufa('0034070101','6',['TIME','PI_FAST'])) [WORKED]

>>>>>>>>>> Lv0_call_uf <<<<<<<<<<

Functions:

##### open_fits(obsid,mpu_no)

-- Opening the FITS file for the unfiltered event file

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs. str!!

##### get_uf(obsid,mpu_no,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, times, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs.
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_uf('0034070101','6',['TIME','RAWX','RAWY'])) [WORKED]

>>>>>>>>>> Lv0_call_hk <<<<<<<<<<

Functions:

##### open_fits(obsid,mpu_no)

-- Opening the FITS file for the housekeeping file

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs. str!!

##### get_hk(obsid,mpu_no,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs.
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_hk('0034070101','4',['MPU_D_TEMP','MPU_ALL_COUNT','MPU_TEC_I'])) [WORKED]

>>>>>>>>>> Lv0_call_att <<<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the attitude file

obsid - Observation ID of the object of interest (10-digit str)

##### get_att(obsid,par_list)

Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_att('0034070101',['TIME','QPARAM','STATE'])) [WORKED]

>>>>>>>>>> Lv0_call_cat <<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the .cat file

obsid - Observation ID of the object of interest (10-digit str)

##### get_cat(obsid,par_list)

Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_cat('0034070101',['FILENAME','FORMAT','TYPE'])) [WORKED]

>>>>>>>>>> Lv0_call_mkf <<<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the mkf filter file

obsid - Observation ID of the object of interest (10-digit str)

##### get_mkf(obsid,par_list)

Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_mkf('0034070101',['TIME','ELV','MOON_DEC'])) [WORKED]

>>>>>>>>>> Lv0_call_orb <<<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the orbit file

obsid - Observation ID of the object of interest (10-digit str)

##### get_orb(obsid,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_orb('0034070101',['TIME','Vy','QUALITY'])) [WORKED]

>>>>>>>>>> Lv0_scp <<<<<<<<<<

Functions:

##### scp(obsid)

-- To securely copy the files from ciri onto /Volumes/Samsung_T5/NICER-data/

obsid - Observation ID of the object of interest (10-digit str)

TEST: for i in range(11,25):
    scp('10600601' + str(i)) WORKED.

>>>>>>>>>> Lv0_gunzip <<<<<<<<<<

Functions:

##### auxil(obsid) -- TESTED THIS WITH unzip_all below!

-- Unzipping the auxil files

obsid - Observation ID of the object of interest (10-digit str)

##### cl(obsid)

-- Unzipping the cl and ufa files

obsid - Observation ID of the object of interest (10-digit str)

##### uf(obsid)

-- Unzipping the uf files

obsid - Observation ID of the object of interest (10-digit str)

##### hk(obsid)

-- Unzipping the hk files

obsid - Observation ID of the object of interest (10-digit str)

##### unzip_all(obsid)

-- Unzipping all the auxil/cl/uf/hk files

obsid - Observation ID of the object of interest (10-digit str)

TEST: unzip_all('1060060127') - WORKED
unzip_all('1023021323') - This is a nonsense ObsID. Wanted to check that os.path.isdir works!
Added an error which'd tell me if one hasn't yet imported the ObsID folder from ciri.

>>>>>>>>>> Lv0_psrpipe <<<<<<<<<<

-- Running psrpipe on the observation, to make more cuts! I decided not to
put in pre-determined options for fully flexibility. Though standard flags
would be ['--emin','0.3','--emax','12.0','--shrinkelvcut'], though there are
others. Check out "psrpipe.py -h"! Also made sure that I moved $OBSID_pipe from
the working directory to where NICERSOFT_DATADIR is, though I need to temporarily
  store the output folder in the working directory.

obsid - Observation ID of the object of interest (10-digit str)
flags - a LIST of input flags for psrpipe

TEST: psrpipe('1060060127',['--emin','0.3','--emax','12.0','--shrinkelvcut'])

--------------------------------------------------------------------------------
################################################################################
--------------------------------------------------------------------------------

################################## LEVEL 1 #####################################

>>>>>>>>>> Lv1_data_gtis <<<<<<<<<

Functions:

##### get_gtis(obsid,bary,gap)

-- Obtaining the GTIs corresponding to the ObsID
Jan 30 - added a second list to be returned - the unshifted GTI values

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
gap - if time between start of next subregion and the end of the previous
subregion is greater than the gap, consider that a new subregion!

TEST: print(get_gtis('1034070104',True,50)) [WORKED]

>>>>>>>>>> Lv1_data_filter <<<<<<<<<<

Functions:

##### filter_time(obsid,bary,par_list,t1,t2)

-- Obtain the time stamps that fall in a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - time value for the lower boundary (in s)
t2 - time value for the upper boundary (in s)

TEST:

t_cut = filter_time('1034070104',True,['TIME'],11113,11945)
counts = np.ones(len(t_cut))
t_bins = np.linspace(11113,11945,11945-11113+1)
from scipy import stats
import matplotlib.pyplot as plt
summed_data, bin_edges, binnumber = stats.binned_statistic(t_cut,counts,statistic='sum',bins=t_bins)
plt.plot(t_bins[:-1],summed_data)
plt.show()

[WORKED]

##### filter_energy(obsid,bary,par_list,E1,E2)

-- Obtain the time stamps and the corresponding energy value (of the photon)
in a desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
E1 - energy value for the lower boundary (in keV)
E2 - energy value for the upper boundary (in keV)

TEST:

t_cut,E_cut = filter_energy('1034070104',True,['TIME','PI'],0.3,12)
counts = np.ones(len(t_cut))
startt = int(t_cut[0])
endt = int(t_cut[-1])
#t_bins = np.linspace(startt,endt,endt-startt+1)
t_bins = np.linspace(11113,11945,11945-11113+1)
E_bins = np.linspace(0.3,12,118)
from scipy import stats
import matplotlib.pyplot as plt
summed_data_t, bin_edges, binnumber = stats.binned_statistic(t_cut,counts,statistic='sum',bins=t_bins)
summed_data_E, bin_edges, binnumber = stats.binned_statistic(E_cut,counts,statistic='sum',bins=E_bins)
plt.plot(t_bins[:-1],summed_data_t)
plt.xlim([11113,11945])
plt.show()

[WORKED? Check to make sure once I got all code running.]

##### filter_data(obsid,bary,par_list,t1,t2,E1,E2)

--  Truncate the data such that you get counts in a given time interval and
    energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - time value for the lower boundary (in s)
t2 - time value for the upper boundary (in s)
E1 - energy value for the lower boundary (in keV)
E2 - energy value for the upper boundary (in keV)

TEST:

t1 = 0
t2 = 72000
E1 = 0.3
E2 = 12
t_cut,E_cut = filter_data('1034070104',True,['TIME','PI'],t1,t2,E1,E2)
counts = np.ones(len(t_cut))
#t_bins = np.linspace(startt,endt,endt-startt+1)
t_bins = np.linspace(t1,t2,t2-t1+1)
E_bins = np.linspace(E1,E2,118)
from scipy import stats
import matplotlib.pyplot as plt
summed_data_t, bin_edges, binnumber = stats.binned_statistic(t_cut,counts,statistic='sum',bins=t_bins)
summed_data_E, bin_edges, binnumber = stats.binned_statistic(E_cut,counts,statistic='sum',bins=E_bins)
plt.figure()
plt.plot(t_bins[:-1],summed_data_t)
plt.xlim([t1,t2])

plt.figure()
plt.plot(E_bins[:-1],summed_data_E)
plt.show() [WORKED]

>>>>>>>>>> Lv1_data_bin <<<<<<<<<<

Functions:

##### binning_t(obsid,bary,par_list,tbin_size,t1,t2)

-- Binning routine for when I truncate the data by JUST time interval.
Got to make sure I have TIME and PI called!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary

TEST:

x,y = binning_t('1034070104',True,['PI','TIME'],1,11113,11945)
print(x[-100:])
print(y[-100:]) [WORKED]

##### binning_E(obsid,bary,par_list,tbin_size,Ebin_size,E1,E2)

-- Binning routine for when I truncate the data by JUST energy range.
Got to make sure I have TIME and PI called!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.05 means bin by 0.05keV
E1 - lower energy boundary
E2 - upper energy boundary

TEST:

w,x,y,z = binning_E('1034070104',True,['PI','TIME'],1,0.05,0.3,12) [WORKED]
print(w[:50])
print(x[:50])
print(y[:50])
print(z[:50])
print(sum(x))
print(sum(z)) #the two sums are basically the same

##### binning_tE(obsid,bary,par_list,tbin_size,Ebin_size,t1,t2,E1,E2)

-- Binning routine for when I truncated the data by BOTH time interval AND energy range.
Got to make sure I have TIME and PI called!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.05 means bin by 0.05keV
t1 - lower time boundary
t2 - upper time boundary
E1 - lower energy boundary
E2 - upper energy boundary

TEST:

w,x,y,z = binning_tE('1034070104',True,['PI','TIME'],1,0.05,11113,11945,0.3,12) [WORKED]
print(w[:50])
print(x[:50])
print(y[:50])
print(z[:50])
print(sum(x))
print(sum(z)) #the two sums are exactly the same

>>>>>>>>>> Lv1_barycorr <<<<<<<<<<

##### get_ra_dec(obsid)

-- Obtain the RA_OBJ and DEC_OBJ corresponding to the observation!

obsid - Observation ID of the object of interest (10-digit str)

TEST: get_ra_dec('1060060127') - WORKED

##### nicerdata_barycorr(obsid,refframe)

-- Applying the barycenter corrections to the X-ray timing data (for NICER in this case)

obsid - Observation ID of the object of interest (10-digit str)
refframe - reference frame for barycenter corrections (usually ICRS)

##### nicersoft_barycorr(obsid,refframe)

-- Applying the barycenter corrections to the X-ray timing data (for NICER in this case)

obsid - Observation ID of the object of interest (10-digit str)
refframe - reference frame for barycenter corrections (usually ICRS)

TEST: nicersoft_barycorr('1060060127','ICRS') - WORKED

--------------------------------------------------------------------------------
################################################################################
--------------------------------------------------------------------------------

################################## LEVEL 2 #####################################

>>>>>>>>>> Lv2_sources <<<<<<<<<<

Functions:

##### obsid_to_obj(obsid)

-- 'Convert' the ObsID into the corresponding object nameself.

obsid - Observation ID of the object of interest (10-digit str)

TEST: obsid_to_obj['1034070104'] [WORKED]

>>>>>>>>>> Lv2_mkdir <<<<<<<<<<

Functions:

##### makedir(dir)

-- Creating a folder if it does not exist in the directory.

https://gist.github.com/keithweaver/562d3caa8650eefe7f84fa074e9ca949

dir - desired directory (provide FULL path!)

>>>>>>>>>> Lv2_lc <<<<<<<<<<

Functions:

##### whole(obsid,bary,name_par_list,par_list,tbin_size,mode)

-- Plot the entire raw time series without any cuts to the data.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
name_par_list - list of parameters specifying parameters like GTI number and/or energy range
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
mode - whether we want to show or save the plot.

name_par_list should be [GTI_true,E_true,GTIno,segment_length,PI1,PI2]

TEST: whole('1034070104',True,['PI','TIME','PI_FAST'],2,'save') [WORKED]
whole('0034070101',True,[True,False,4,100,300,800],['TIME','PI','PI_FAST'],1,'show') - Jun 3 [WORKED]

##### partial_t(obsid,bary,name_par_list,par_list,tbin_size,t1,t2,mode)

-- Plot the time series for a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
name_par_list - list of parameters specifying parameters like GTI number and/or energy range
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary
mode - whether we want to show or save the plot

name_par_list should be [GTI_true,E_true,GTIno,segment_length,PI1,PI2]

TEST: partial_t('1034070104',True,['PI','TIME','PI_FAST'],1,11113,11945,'show') [WORKED]
partial_t('0034070101',True,[True,False,1,100,300,800],['PI','TIME','PI_FAST'],1,0,100,'show') - Jun 3 [WORKED]

##### partial_E(obsid,bary,par_list,tbin_size,Ebin_size,E1,E2,mode)

-- Plot the time series for a desired energy range.
   [Though I don't think this will be used much. Count/s vs energy is pointless,
   since we're not folding in response matrix information here to get the flux.
   So we're just doing a count/s vs time with an energy cut to the data.]

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
name_par_list - list of parameters specifying parameters like GTI number and/or energy range
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
E1 - lower energy boundary
E2 - upper energy boundary

name_par_list should be [GTI_true,E_true,GTIno,segment_length,PI1,PI2]

TEST: partial_E('1034070104',True,['PI','TIME','PI_FAST'],1,0.05,0.3,12,'show') [WORKED]
partial_E('0034070101',True,[True,False,1,100,300,800],['PI','TIME','PI_FAST'],1,0.05,0.3,12,'show') - Jun 3 [WORKED]

##### partial_tE(obsid,bary,par_list,tbin_size,Ebin_size,t1,t2,E1,E2,mode)

-- Plot the time series for a desired time interval and desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
t1 - lower time boundary
t2 - upper time boundary
E1 - lower energy boundary
E2 - upper energy boundary
mode - whether we want to show or save the plot

TEST: [WORKED]

partial_tE('1034070104',True,['PI','TIME','PI_FAST'],1,0.05,11113,11945,0.3,2.7,'save')
partial_tE('1034070104',True,['PI','TIME','PI_FAST'],1,0.05,11113,11945,2.7,12,'save')

>>>>>>>>>> Lv2_ps_method <<<<<<<<<<

Functions:

##### padding(counts)

-- For use in the function manual. Recall: The optimal number of bins is 2^n,
n being some natural number. We pad 0s onto the original data set, where
the number of 0s to pad is determined by the difference between the optimal
number of bins and the length of the data set (where the former should be
greater than the latter!)

counts - array of counts from the binned data

##### oversample(factor,counts)

-- Perform oversampling on the data. Return the padded array of counts.

factor - N-times oversampling; factor = 5 means 5x oversampling
counts - array of counts from the binned data

##### pdgm(times,counts,xlims,vlines,toplot,oversampling)

-- Generating the power spectrum through the signal.periodogram method.

times - array of binned times
counts - array of counts from the binned data
xlims - a list or array: first entry = True/False as to whether to impose an
xlim; second and third entry correspond to the desired x-limits of the plot
vlines - a list or array: first entry = True/False as to whether to draw
a vertical line in the plot; second entry is the equation for the vertical line
toplot - whether to show the plot or not
oversampling - whether to perform oversampling. Array will consist of
[True/False, oversampling factor]

##### manual(times,counts,xlims,vlines,toplot,oversampling)

-- Generating the power spectrum through the manual FFT method.

times - array of binned times
counts - array of counts from the binned data
xlims - a list or array: first entry = True/False as to whether to impose an
xlim; second and third entry correspond to the desired x-limits of the plot
vlines - a list or array: first entry = True/False as to whether to draw
a vertical line in the plot; second entry is the equation for the vertical line
toplot - whether to show the plot or not
oversampling - whether to perform oversampling. Array will consist of
[True/False, oversampling factor]

>>>>>>>>>> Lv2_ps <<<<<<<<<<

Functions:

##### whole(obsid,bary,par_list,tbin_size,mode,ps_type,oversampling,xlims,vlines)

-- Plot the entire power spectrum without any cuts to the data.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
mode - whether we want to show or save the plot.
ps_type - obtain power spectrum through the periodogram method ('period') or
the manual FFT way ('manual') or both ('both')
oversampling - whether to perform oversampling. Array will consist of
[True/False, oversampling factor]
xlims - a list or array: first entry = True/False as to whether to impose an
xlim; second and third entry correspond to the desired x-limits of the plot
vlines - a list or array: first entry = True/False as to whether to draw
a vertical line in the plot; second entry is the equation for the vertical line

TEST: whole('0034070101',True,['TIME','PI','PI_FAST'],0.1,'show','both',[True,5],[True,0,1],[True,0.2078])
[WORKED]
whole('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],0.1,'show','both',[True,5],[True,0,1],[True,0.2081]) - Jun 3 [WORKED]

##### partial_t(obsid,bary,par_list,tbin_size,t1,t2,mode,ps_type,oversampling,xlims,vlines)

-- Plot the power spectrum for a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary
mode - whether we want to show or save the plot.
ps_type - obtain power spectrum through the periodogram method ('period') or
the manual FFT way ('manual') or both ('both')
oversampling - whether to perform oversampling. Array will consist of
[True/False, oversampling factor]
xlims - a list or array: first entry = True/False as to whether to impose an
xlim; second and third entry correspond to the desired x-limits of the plot
vlines - a list or array: first entry = True/False as to whether to draw
a vertical line in the plot; second entry is the equation for the vertical line

TEST: partial_t('1034070104',True,['TIME','PI','PI_FAST'],0.1,11113,11945,'show','both',[True,5],[True,0,1],[True,0.2078])
[WORKED]
partial_t('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],0.1,0,100,'show','both',[True,5],[True,0,1],[True,0.2081]) - Jun 3 [WORKED]

##### partial_E(obsid,bary,par_list,tbin_size,Ebin_size,E1,E2,mode,ps_type,oversampling,xlims,vlines)

-- Plot the time series for a desired energy range.
[Though I don't think this will be used much. Count/s vs energy is pointless,
since we're not folding in response matrix information here to get the flux.
So we're just doing a count/s vs time with an energy cut to the data.]

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
E1 - lower energy boundary
E2 - upper energy boundary
mode - whether we want to show or save the plot.
ps_type - obtain power spectrum through the periodogram method ('period') or
the manual FFT way ('manual') or both ('both')
oversampling - whether to perform oversampling. Array will consist of
[True/False, oversampling factor]
xlims - a list or array: first entry = True/False as to whether to impose an
xlim; second and third entry correspond to the desired x-limits of the plot
vlines - a list or array: first entry = True/False as to whether to draw
a vertical line in the plot; second entry is the equation for the vertical line

TEST: partial_E('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],0.1,0.05,3,8,'show','both',[True,5],[True,0,1],[True,0.2081]) - Jun 3 [WORKED]

##### partial_tE(obsid,bary,par_list,tbin_size,Ebin_size,t1,t2,E1,E2,mode,ps_type,oversampling,xlims,vlines)

-- Plot the time series for a desired time interval and desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
t1 - lower time boundary
t2 - upper time boundary
E1 - lower energy boundary
E2 - upper energy boundary
mode - whether we want to show or save the plot.
ps_type - obtain power spectrum through the periodogram method ('period') or
the manual FFT way ('manual') or both ('both')
oversampling - whether to perform oversampling. Array will consist of
[True/False, oversampling factor]
xlims - a list or array: first entry = True/False as to whether to impose an
xlim; second and third entry correspond to the desired x-limits of the plot
vlines - a list or array: first entry = True/False as to whether to draw
a vertical line in the plot; second entry is the equation for the vertical line

TEST:
partial_tE('1034070104',True,['TIME','PI','PI_FAST'],0.1,0.05,11113,11945,0.3,2.7,'save','both',[True,5],[True,0,1],[True,0.2078])
partial_tE('1034070104',True,['TIME','PI','PI_FAST'],0.1,0.05,11113,11945,2.7,12,'save','both',[True,5],[True,0,1],[True,0.2078])
[WORKED]
partial_tE('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],0.1,0.05,0,100,3,8,'show','both',[True,5],[True,0,1],[True,0.2081]) - Jun 3 [WORKED]

>>>>>>>>>> Lv2_phase <<<<<<<<<<

##### pulse_profile(f_pulse,times,counts,shift,no_phase_bins)

--  Calculating the pulse profile for the observation. Goes from 0 to 2!

f_pulse - the frequency of the pulse
times - the array of time values
counts - the array of counts values
shift - how much to shift the pulse by in the phase axis.
It only affects how the pulse profile is 'displaced'.
no_phase_bins - number of phase bins desired

##### whole(obsid,bary,name_par_list,par_list,tbin_size,f_pulse,shift,no_phase_bins,mode)

-- Plot the entire raw pulse profile without any cuts to the data.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how it is presented.
no_phase_bins - number of phase bins desired
mode - whether we want to show or save the plot.

TEST: whole('0034070101',True,['TIME','PI','PI_FAST'],1,0.2085,0.4,1001,'show') [WORKED]
whole('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],1,0.2081,0.4,51,'show') - Jun 3 [WORKED]

##### partial_t(obsid,bary,name_par_list,par_list,tbin_size,f_pulse,shift,no_phase_bins,t1,t2,mode)

--  Plot the pulse profile for a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how it is presented.
no_phase_bins - number of phase bins desired
t1 - lower time boundary
t2 - upper time boundary
mode - whether we want to show or save the plot

TEST: partial_t('0034070101',True,['TIME','PI','PI_FAST'],1,0.2085,0.4,1001,0,809,'show') [WORKED]
partial_t('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],1,0.2081,0.4,51,0,100,'show') - Jun 3 [WORKED]

##### partial_E(obsid,bary,name_par_list,par_list,tbin_size,Ebin_size,f_pulse,shift,no_phase_bins,E1,E2,mode)

-- Plot the pulse profile for a desired energy range.
[Though I don't think this will be used much. Count/s vs energy is pointless,
since we're not folding in response matrix information here to get the flux.
So we're just doing a count/s vs time with an energy cut to the data.]
INTERJECTION: This caveat is for the spectrum, NOT the pulse profile!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how it is presented.
no_phase_bins - number of phase bins desired
E1 - lower energy boundary
E2 - upper energy boundary

TEST: partial_E('0034070101',True,['TIME','PI','PI_FAST'],1,0.05,0.2085,0.4,1001,0,20,'show') [WORKED]
partial_E('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],1,0.05,0.2081,0.4,51,3,8,'show') [WORKED]

##### partial_tE(obsid,bary,name_par_list,par_list,tbin_size,Ebin_size,f_pulse,shift,no_phase_bins,t1,t2,E1,E2,mode)

-- Plot the pulse profile for a desired time interval and desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how it is presented.
no_phase_bins - number of phase bins desired
t1 - lower time boundary
t2 - upper time boundary
E1 - lower energy boundary
E2 - upper energy boundary
mode - whether we want to show or save the plot

TEST: partial_tE('0034070101',True,['TIME','PI','PI_FAST'],1,0.05,0.2085,0.4,101,0,809,0,20,'save') [WORKED]
partial_tE('0034070101',True,[True,True,1,100,300,800],['TIME','PI','PI_FAST'],1,0.05,0.2081,0.4,51,0,100,3,8,'show') [WORKED]

>>>>>>>>>> Lv2_color <<<<<<<<<<

##### soft_counts(E_bound,pi_data)

-- Will get an array of PI values from the data, where each entry = 1 count.
So construct an array of ones of equal length, then where E >= E_bound, set to 0.
This will give an array where 0 = harder X-rays, 1 = softer X-rays, so when
doing the binning, will get just soft counts.

E_bound - boundary energy considered (in keV)
pi_data - array of PI values

##### hard_counts(E_bound,pi_data)

-- Will get an array of PI values from the data, where each entry = 1 count.
So construct an array of ones of equal length, then where E < E_bound, set to 0.
This will give an array where 0 = harder X-rays, 1 = softer X-rays, so when
doing the binning, will get just soft counts.

E_bound - boundary energy considered (in keV)
pi_data - array of PI values

##### get_color(obsid,bary,name_par_list,par_list,E_bound,tbin_size)

-- Calculating the color - hard/soft and (hard-soft)/(hard+soft)

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
name_par_list - list of parameters specifying parameters like GTI number and/or energy range
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
E_bound - boundary energy considered (in keV)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!

name_par_list should be [GTI_true,E_true,GTIno,segment_length,PI1,PI2]

TEST: a,b,c = get_color('0034070101',True,[True,True,1,100,300,800],['TIME','PI'],3,1) [WORKED]
plt.figure(1)
plt.plot(a[:-1],b)
plt.figure(2)
plt.plot(a[:-1],c)
plt.show()

##### get_color_t(obsid,bary,name_par_list,par_list,E_bound,tbin_size,t1,t2)

-- Calculating the color - hard/soft and (hard-soft)/(hard+soft)

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
name_par_list - list of parameters specifying parameters like GTI number and/or energy range
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
E_bound - boundary energy considered (in keV)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary

name_par_list should be [GTI_true,E_true,GTIno,segment_length,PI1,PI2]

TEST: a,b,c = get_color_t('0034070101',True,[True,True,1,100,300,800],['TIME','PI'],3,1) [WORKED]
plt.figure(1)
plt.plot(a[:-1],b)
plt.figure(2)
plt.plot(a[:-1],c)
plt.show()

##### plotting(obsid,bary,name_par_list,par_list,E_bound,tbin_size,mode)

-- Plotting the hardness ratio/color diagrams.

t_bins,color,color_diff = get_color(obsid,bary,name_par_list,par_list,E_bound,tbin_size)

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
name_par_list - list of parameters specifying parameters like GTI number and/or energy range
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
E_bound - boundary energy considered (in keV)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
mode - whether we want to show or save the plot.

name_par_list should be [GTI_true,E_true,GTIno,segment_length,PI1,PI2]

TEST: plotting('0034070101',True,[True,True,1,100,300,800],['TIME','PI'],3,1,'save') [WORKED]

##### plotting_t(obsid,bary,par_list,E_bound,tbin_size,t1,t2,mode)

-- Plotting the hardness ratio/color diagrams.

t_bins,color,color_diff = get_color_t(obsid,bary,name_par_list,par_list,E_bound,tbin_size)

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
name_par_list - list of parameters specifying parameters like GTI number and/or energy range
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
E_bound - boundary energy considered (in keV)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary
mode - whether we want to show or save the plot.

name_par_list should be [GTI_true,E_true,GTIno,segment_length,PI1,PI2]

TEST: plotting_t('1034070104',True,['PI','TIME','PI_FAST'],2.7,1,11113,11945,'show') [WORKED]
plotting_t('0034070101',True,[True,True,1,100,300,800],['PI','TIME','PI_FAST'],2.7,1,0,99,'show') - Jun 3 [WORKED]
>>>>>>>>>> Lv2_presto_all <<<<<<<<<<

##### realfft(obsid)

-- Performing PRESTO's realfft on the binned data (.dat)

obsid - Observation ID of the object of interest (10-digit str)

##### accelsearch(obsid,flags)

-- Performing PRESTO's accelsearch on the FFT data (.fft)

obsid - Observation ID of the object of interest (10-digit str)
flags - a LIST of input flags for psrpipe

##### prepfold(obsid,no_cand,zmax)

-- Performing PRESTO's prepfold on the pulsation candidates.

obsid - Observation ID of the object of interest (10-digit str)
no_cand - number of candidates. I haven't yet thought of a way to automate this,
so I'll have to do all of the above first BEFORE I do prepfold. It's fine though,
since this is the only 'big' manual step.
zmax - maximum acceleration

##### ps2pdf(obsid)

-- Converting from .ps to .pdf

obsid - Observation ID of the object of interest (10-digit str)

>>>>>>>>>> Lv2_presto_segments <<<<<<<<<<

##### get_gti_file(obsid,segment_length)

-- Creating the individual .gti files for my data segments!

obsid - Observation ID of the object of interest (10-digit str)
segment_length - length of the individual segments for combining power spectra

TEST: get_gti_file('1060060127',100)

##### niextract_gti_time(obsid,segment_length)

-- Using niextract-events to get segmented data based on the [segment_length]-length
GTIs that were created above!

obsid - Observation ID of the object of interest (10-digit str)
segment_length - length of the individual segments for combining power spectra

TEST: niextract_gti_time('1060060127',100)

##### niextract_gti_energy(obsid,PI1,PI2)

-- Using niextract-events to get segmented data based on the energy range

obsid - Observation ID of the object of interest (10-digit str)
PI1 - lower bound of PI (not energy in keV!) desired for the energy range
PI2 - upper bound of PI (not energy in keV!) desired for the energy range

TEST: niextract_gti_energy('1060060127',200,300)

##### niextract_gti_time_energy(obsid,segment_length,PI1,PI2)

-- Using niextract-events to get segmented data based on [segment_length]-length
GTIs that were created above, AND energy range!

obsid - Observation ID of the object of interest (10-digit str)
segment_length - length of the individual segments for combining power spectra
PI1 - lower bound of PI (not energy in keV!) desired for the energy range
PI2 - upper bound of PI (not energy in keV!) desired for the energy range

TEST: niextract_gti_time_energy('0034070101',100,300,800) WORKED.

##### do_nicerfits2presto(obsid,tbin)

-- Using nicerfits2presto.py to bin the data, and to convert into PRESTO-readable format.
I can always move files to different folders to prevent repeats (especially for large files)

obsid - Observation ID of the object of interest (10-digit str)
tbin - size of the bins in time

TEST: do_nicerfits2presto('1060060127',0.0005)

##### edit_inf(obsid,tbin,segment_length)

-- Editing the .inf file, as it seems like accelsearch uses some information from the .inf file!
Mainly need to edit "Number of bins in the time series".
This is only for when we make segments by time though!

obsid - Observation ID of the object of interest (10-digit str)
tbin - size of the bins in time
segment_length - length of the individual segments

TEST: edit_inf('1060060127',0.0005,1000)

##### edit_binary(obsid,tbin,segment_length)

-- To pad the binary file so that it will be as long as the desired segment length.
The value to pad with for each time bin, is the average count rate in THAT segment!
Again, this is only for when we make segments by time!

obsid - Observation ID of the object of interest (10-digit str)
tbin - size of the bins in time
segment_length - length of the individual segments

TEST: edit_binary('1060060127',0.0005,1000)

##### realfft(obsid)

-- Performing PRESTO's realfft on the binned data (.dat)

obsid - Observation ID of the object of interest (10-digit str)

TEST: realfft('1060060127')

##### accelsearch(obsid,flags)

-- Performing PRESTO's accelsearch on the FFT data (.fft)

obsid - Observation ID of the object of interest (10-digit str)
flags - a LIST of input flags for accelsearch

TEST: accelsearch_flags = ['-numharm','8','-zmax','200','-photon','-flo','1','-fhi','1000']
      accelsearch('1060060127',accelsearch_flags) [WORKED]

##### prepfold(obsid,no_cands,zmax)

-- Performing PRESTO's prepfold on the pulsation candidates.

obsid - Observation ID of the object of interest (10-digit str)
no_cand - number of candidates. I haven't yet thought of a way to automate this,
so I'll have to do all of the above first BEFORE I do prepfold. It's fine though,
since this is the only 'big' manual step.
zmax - maximum acceleration

TEST: prepfold('0034070101',10,0) [WORKED]

##### ps2pdf(obsid)

-- Converting from .ps to .pdf

obsid - Observation ID of the object of interest (10-digit str)

>>>>>>>>>> Lv2_presto_preprocess <<<<<<<<<<

##### preprocess(obsid,psrpipe_flags,refframe,tbin)

-- Preprocessing the NICER data for use in PRESTO, so running scp, gunzip, psrpipe,
    barycorr, and nicerfits2presto.

obsid - Observation ID of the object of interest (10-digit str)
psrpipe_flags - a LIST of input flags for psrpipe
refframe - reference frame for barycenter corrections (usually ICRS)
tbin - time bin for PRESTO data in seconds

TEST: preprocess('1060060127',['--emin','0.3','--emax','12.0','--shrinkelvcut'],'ICRS','0.00025')

################################################################################
################################################################################
################################################################################


>>>>>>>>>> Lv3_diagnostics_display <<<<<<<<<<

##### display_all(obsid,diag_var,lc_t,lc_counts,diag_t,diag_counts,filetype)

-- To display the plots for desired time interval. Whether to save or show the
plots is determined in Lv3_diagnostics.

obsid - Observation ID of the object of interest (10-digit str)
diag_var - the diagnostic variable we are looking at
lc_t - array corresponding to time values for the light curve
lc_counts - array corresponding to counts for the light curve
diag_t - array corresponding to times for the diagnostic variable
diag_counts - array corresponding to counts for the diagnostic variable
filetype = '.att', '.mkf', '.cl' or ['.hk',mpuno]

##### display_t(obsid,diag_var,t1,t2,lc_t,lc_counts,diag_t,diag_counts,filetype)

-- To display the plots for desired time interval. Whether to save or show the
plots is determined in Lv3_diagnostics.

obsid - Observation ID of the object of interest (10-digit str)
diag_var - the diagnostic variable we are looking at
t1 - lower time boundary
t2 - upper time boundary
lc_t - array corresponding to time values for the light curve
lc_counts - array corresponding to counts for the light curve
diag_t - array corresponding to times for the diagnostic variable
diag_counts - array corresponding to counts for the diagnostic variable
filetype = '.att', '.mkf', '.cl' or ['.hk',mpuno]

>>>>>>>>>> Lv3_diagnostics <<<<<<<<<<

##### diag_all(obsid,bary,par_list,tbin_size,mode,diag_vars)

-- Get the diagnostic plots for a desired time interval.
[Likely too large a range in time (and energy) to be sufficiently useful for
diagnosis.]

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
mode - whether we want to show or save the plot.
diag_vars - a dictionary where each key = 'att','mkf','hk', or 'cl', and
diag_vars[key] provides the list of variables to loop over.

TEST: diag_all('1034070104',True,['PI','TIME','PI_FAST'],1,'save') [WORKED]
HAVE NOT TESTED WITH DIAG_VARS, BUT SHOULD BE STRAIGHTFORWARD. 1/14 4PM.

##### diag_t(obsid,bary,par_list,tbin_size,t1,t2,mode)

-- Get the diagnostic plots for a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary
mode - whether we want to show or save the plot.

TEST: diag_t('1034070104',True,['PI','TIME','PI_FAST'],1,11113,11945,'save') [WORKED]
HAVE NOT TESTED WITH DIAG_VARS, BUT SHOULD BE STRAIGHTFORWARD. 1/14 4PM.

>>>>>>>>>> Lv3_E_boundary <<<<<<<<<<

##### E_bound(obsid,bary,par_list,E1,E2,cut_type,bound):

-- Gives the energy bound corresponding to either a custom cut or a median cut.
   Could add more cuts in the future!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
E1 - energy value for the lower boundary (in keV)
E2 - energy value for the upper boundary (in keV)
cut_type - 'manual' or 'median'
bound - boundary energy for when cut_type = 'manual'

TEST: print(E_bound('0034070104',True,['PI','TIME','PI_FAST'],0.0,20,'median',2.7)) [WORKED]

>>>>>>>>>> Lv3_pulsedfrac.py <<<<<<<<<<

##### pf_all(obsid,bary,par_list,tbin_size,f_pulse,shift,no_phase_bins,mode):

-- Obtaining the pulsed fraction from the entire raw pulse profile without
    any cuts to the data.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how the pulse profile is 'displaced'.
no_phase_bins - number of phase bins desired
mode - whether we want to show or save the plot.

TEST: print(pf_all('0034070104',True,['TIME','PI','PI_FAST'],1,0.20846118761251825,0.4,50,'show')) [WORKED]

##### pf_t(obsid,bary,par_list,tbin_size,f_pulse,shift,no_phase_bins,t1,t2,mode):

-- Obtain the pulsed fraction from the pulse profile for a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how it is presented.
no_phase_bins - number of phase bins desired
t1 - lower time boundary
t2 - upper time boundary
mode - whether we want to show or save the plot

TEST: print(pf_t('0034070101',True,['TIME','PI','PI_FAST'],1,0.20846118761251825,0.4,50,0,500,'show')) [WORKED]

##### pf_E(obsid,bary,par_list,tbin_size,Ebin_size,f_pulse,shift,no_phase_bins,E1,E2,mode):

-- Obtain the pulsed fraction from the pulse profile for a desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how it is presented.
no_phase_bins - number of phase bins desired
E1 - lower energy boundary
E2 - upper energy boundary

TEST: print(pf_E('0034070101',True,['TIME','PI','PI_FAST'],1,0.05,0.20846118761251825,0.4,50,0.3,12,'show')) [WORKED]

##### pf_tE(obsid,bary,par_list,tbin_size,Ebin_size,f_pulse,shift,no_phase_bins,t1,t2,E1,E2,mode):

-- Obtain the pulsed fraction from a desired time interval and desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
f_pulse - the frequency of the pulse
shift - how much to shift the pulse by in the phase axis.
It only affects how it is presented.
no_phase_bins - number of phase bins desired
t1 - lower time boundary
t2 - upper time boundary
E1 - lower energy boundary
E2 - upper energy boundary
mode - whether we want to show or save the plot

TEST: print(pf_tE('0034070101',True,['TIME','PI','PI_FAST'],1,0.05,0.20846118761251825,0.4,50,0,500,0.3,12,'show')) [WORKED]

>>>>>>>>>> Lv3_duty_cycle.py <<<<<<<<<<

##### duty_cycle(obsid,tbin,segment_length,duty_cycle_bin,threshold):

-- To determine the percentage of "data used"/total amount of data. Have two
types of values:
1) % of bins (of size duty_cycle_bin) with data over the ENTIRE observation
2) % of bins with data over POTENTIALLY USABLE segments (recall that if the event
   file is completely empty, then nicerfits2presto would not process it!)
3) % of bins with data ACTUALLY USED (so with a threshold defined)

obsid - Observation ID of the object of interest (10-digit str)
tbin - size of the bins in time
segment_length - length of the individual segments
duty_cycle_bin - binning used to calculate the duty cycle
threshold - if amount of data in the segment is more than threshold IN PERCENTAGE, use the data

TEST: duty_cycle('0034070101',0.00025,100,1,10)











########################### THINK ABOUT THIS LATER #############################
WILL USE PYXSPEC IN THE FUTURE ANYWAYS. DISREGARD.


>>>>>>>>>> Lv1_data_spectra <<<<<<<<<<

Functions:

##### read_redist()

--  Opening the FITS file corresponding to the redistribution matrix

    Describes the detector response

    Has CHANNEL, E_MIN, E_MAX for first card
    Has ENERG_LO, ENERG_HI, N_GRP, F_CHAN, N_CHAN, MATRIX

##### read_anc()

--  Opening the FITS file corresponding to the ancillary response

    Describes the efficiency vs energy; gives telescope area x filter efficiency
    x detector quantum efficiency vs energy

    Has ENERG_LO, ENERG_HI, SPECRESP, ENERGY, XRCAREA, QE, WINDOW, THERMALSD

TEST:
redist = read_redist()
print(redist[1].data['CHANNEL'][0:20])
print(redist[1].data['E_MIN'][0:20])
print(redist[1].data['E_MAX'][0:20])

print(redist[2].data['ENERG_LO'][0:20])
print(redist[2].data['ENERG_HI'][0:20])
print(redist[2].data['N_GRP'][0:20])
print(redist[2].data['F_CHAN'][0:20])
print(redist[2].data['N_CHAN'][0:20])
print(redist[2].data['MATRIX'][0:20])

read_anc():

print(anc[1].data['ENERG_LO'][0:20])
print(anc[1].data['ENERG_HI'][0:20])
print(anc[1].data['SPECRESP'][0:20])
print(anc[1].data['ENERGY'][0:20])
print(anc[1].data['XRCAREA'][0:20])
print(anc[1].data['QE'][0:20])
print(anc[1].data['WINDOW'][0:20])
print(anc[1].data['THERMALSD'][0:20])

print(np.min(anc[1].data['XRCAREA'][0:20]),np.max(anc[1].data['XRCAREA'][0:20]))
print(np.min(anc[1].data['QE'][0:20]),np.max(anc[1].data['QE'][0:20]))
print(np.min(anc[1].data['WINDOW'][0:20]),np.max(anc[1].data['WINDOW'][0:20]))
print(np.min(anc[1].data['THERMALSD']),np.max(anc[1].data['THERMALSD']))
