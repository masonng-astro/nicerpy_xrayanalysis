This is documentation for the suite of programs I am writing.

FUTURE IMPROVEMENTS as of Jan 8 2019:

1) Could add a FULL list of the columns + their descriptions to the bottom
of each of the files for the Lv0-related FITS files.
2) For the Lv0 functions, change the function description to add more
representative variables. Currently, I am just using event_cl as an example.

################################## LEVEL 0 ####################################

Base level - obtaining data and then binning them

>>>>>>>>>> Lv0_dirs <<<<<<<<<<

Functions:

##### global_par
-- Defining global variables for the directories
-- has BASE_DIR and NICER_DATADIR

>>>>>>>>>> Lv0_call_eventcl <<<<<<<<<<

Functions:

##### open_fits(obsid,bary)

-- Opening the FITS file for the cleaned event file

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False

##### get_eventcl(obsid,bary,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, times, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_eventcl('0034070101',True,['PI_FAST','TIME'])) [WORKED]

>>>>>>>>>> Lv0_call_ufa <<<<<<<<<<

Functions:

##### open_fits(obsid,mpu_no)

-- Opening the FITS file for the ufa event file

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs. str!!
MPU number 7 corresponds to the COMBINED file!

##### get_ufa(obsid,mpu_no,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, times, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs.
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_ufa('0034070101','6',['TIME','PI_FAST'])) [WORKED]

>>>>>>>>>> Lv0_call_uf <<<<<<<<<<

Functions:

##### open_fits(obsid,mpu_no)

-- Opening the FITS file for the unfiltered event file

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs. str!!

##### get_uf(obsid,mpu_no,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, times, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs.
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_uf('0034070101','6',['TIME','RAWX','RAWY'])) [WORKED]

>>>>>>>>>> Lv0_call_hk <<<<<<<<<<

Functions:

##### open_fits(obsid,mpu_no)

-- Opening the FITS file for the housekeeping file

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs. str!!

##### get_hk(obsid,mpu_no,par_list)

-- Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
mpu_no - MPU number, from 0 to 6 inclusive. For the 7 MPUs.
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_hk('0034070101','4',['MPU_D_TEMP','MPU_ALL_COUNT','MPU_TEC_I'])) [WORKED]

>>>>>>>>>> Lv0_call_att <<<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the attitude file

obsid - Observation ID of the object of interest (10-digit str)

##### get_att(obsid,par_list)

Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_att('0034070101',['TIME','QPARAM','STATE'])) [WORKED]

>>>>>>>>>> Lv0_call_cat <<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the .cat file

obsid - Observation ID of the object of interest (10-digit str)

##### get_cat(obsid,par_list)

Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_cat('0034070101',['FILENAME','FORMAT','TYPE'])) [WORKED]

>>>>>>>>>> Lv0_call_mkf <<<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the mkf filter file

obsid - Observation ID of the object of interest (10-digit str)

##### get_mkf(obsid,par_list)

Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_mkf('0034070101',['TIME','ELV','MOON_DEC'])) [WORKED]

>>>>>>>>>> Lv0_call_orb <<<<<<<<<<

Functions:

##### open_fits(obsid)

-- Opening the FITS file for the orbit file

obsid - Observation ID of the object of interest (10-digit str)

##### get_orb(obsid,par_list)

Getting data from the FITS files, e.g., PI_FAST, TIME, PI, PI_RATIO, FLAGS

obsid - Observation ID of the object of interest (10-digit str)
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI)

TEST: print(get_orb('0034070101',['TIME','Vy','QUALITY'])) [WORKED]

--------------------------------------------------------------------------------
################################################################################
--------------------------------------------------------------------------------

################################## LEVEL 1 #####################################

>>>>>>>>>> Lv1_data_gtis <<<<<<<<<

Functions:

##### get_gtis(obsid,bary)

-- Obtaining the GTIs corresponding to the ObsID

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False

TEST: print(get_gtis('0034070101',True)) [WORKED]

>>>>>>>>>> Lv1_data_filter <<<<<<<<<<

Functions:

##### filter_time(obsid,bary,par_list,t1,t2)

-- Obtain the time stamps that fall in a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - time value for the lower boundary (in s)
t2 - time value for the upper boundary (in s)

TEST:

t_cut = filter_time('1034070104',True,['TIME'],11113,11945)
counts = np.ones(len(t_cut))
t_bins = np.linspace(11113,11945,11945-11113+1)
from scipy import stats
import matplotlib.pyplot as plt
summed_data, bin_edges, binnumber = stats.binned_statistic(t_cut,counts,statistic='sum',bins=t_bins)
plt.plot(t_bins[:-1],summed_data)
plt.show()

[WORKED]

##### filter_energy(obsid,bary,par_list,E1,E2)

-- Obtain the time stamps and the corresponding energy value (of the photon)
in a desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
E1 - energy value for the lower boundary (in keV)
E2 - energy value for the upper boundary (in keV)

TEST:

t_cut,E_cut = filter_energy('1034070104',True,['TIME','PI'],0.3,12)
counts = np.ones(len(t_cut))
startt = int(t_cut[0])
endt = int(t_cut[-1])
#t_bins = np.linspace(startt,endt,endt-startt+1)
t_bins = np.linspace(11113,11945,11945-11113+1)
E_bins = np.linspace(0.3,12,118)
from scipy import stats
import matplotlib.pyplot as plt
summed_data_t, bin_edges, binnumber = stats.binned_statistic(t_cut,counts,statistic='sum',bins=t_bins)
summed_data_E, bin_edges, binnumber = stats.binned_statistic(E_cut,counts,statistic='sum',bins=E_bins)
plt.plot(t_bins[:-1],summed_data_t)
plt.xlim([11113,11945])
plt.show()

[WORKED? Check to make sure once I got all code running.]

##### filter_data(obsid,bary,par_list,t1,t2,E1,E2)

--  Truncate the data such that you get counts in a given time interval and
    energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - time value for the lower boundary (in s)
t2 - time value for the upper boundary (in s)
E1 - energy value for the lower boundary (in keV)
E2 - energy value for the upper boundary (in keV)

TEST:

t1 = 0
t2 = 72000
E1 = 0.3
E2 = 12
t_cut,E_cut = filter_data('1034070104',True,['TIME','PI'],t1,t2,E1,E2)
counts = np.ones(len(t_cut))
#t_bins = np.linspace(startt,endt,endt-startt+1)
t_bins = np.linspace(t1,t2,t2-t1+1)
E_bins = np.linspace(E1,E2,118)
from scipy import stats
import matplotlib.pyplot as plt
summed_data_t, bin_edges, binnumber = stats.binned_statistic(t_cut,counts,statistic='sum',bins=t_bins)
summed_data_E, bin_edges, binnumber = stats.binned_statistic(E_cut,counts,statistic='sum',bins=E_bins)
plt.figure()
plt.plot(t_bins[:-1],summed_data_t)
plt.xlim([t1,t2])

plt.figure()
plt.plot(E_bins[:-1],summed_data_E)
plt.show() [WORKED]

>>>>>>>>>> Lv1_data_bin <<<<<<<<<<

Functions:

##### binning_t(obsid,bary,par_list,tbin_size,t1,t2)

-- Binning routine for when I truncate the data by JUST time interval.
Got to make sure I have TIME and PI called!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary

TEST:

x,y = binning_t('1034070104',True,['PI','TIME'],1,11113,11945)
print(x[-100:])
print(y[-100:]) [WORKED]

##### binning_E(obsid,bary,par_list,tbin_size,Ebin_size,E1,E2)

-- Binning routine for when I truncate the data by JUST energy range.
Got to make sure I have TIME and PI called!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.05 means bin by 0.05keV
E1 - lower energy boundary
E2 - upper energy boundary

TEST:

w,x,y,z = binning_E('1034070104',True,['PI','TIME'],1,0.05,0.3,12) [WORKED]
print(w[:50])
print(x[:50])
print(y[:50])
print(z[:50])
print(sum(x))
print(sum(z)) #the two sums are basically the same

##### binning_tE(obsid,bary,par_list,tbin_size,Ebin_size,t1,t2,E1,E2)

-- Binning routine for when I truncated the data by BOTH time interval AND energy range.
Got to make sure I have TIME and PI called!

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.05 means bin by 0.05keV
t1 - lower time boundary
t2 - upper time boundary
E1 - lower energy boundary
E2 - upper energy boundary

TEST:

w,x,y,z = binning_tE('1034070104',True,['PI','TIME'],1,0.05,11113,11945,0.3,12) [WORKED]
print(w[:50])
print(x[:50])
print(y[:50])
print(z[:50])
print(sum(x))
print(sum(z)) #the two sums are exactly the same

--------------------------------------------------------------------------------
################################################################################
--------------------------------------------------------------------------------

################################## LEVEL 2 #####################################

>>>>>>>>>> Lv2_sources <<<<<<<<<<

Functions:

##### obsid_to_obj(obsid)

-- 'Convert' the ObsID into the corresponding object nameself.

obsid - Observation ID of the object of interest (10-digit str)

TEST: obsid_to_obj['1034070104'] [WORKED]

>>>>>>>>>> Lv2_mkdir <<<<<<<<<<

Functions:

##### makedir(dir)

-- Creating a folder if it does not exist in the directory.

https://gist.github.com/keithweaver/562d3caa8650eefe7f84fa074e9ca949

dir - desired directory (provide FULL path!)

>>>>>>>>>> Lv2_lc <<<<<<<<<<

Functions:

##### whole(obsid,bary,par_list,tbin_size,mode)

-- Plot the entire raw time series without any cuts to the data.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
mode - whether we want to show or save the plot.

TEST: whole('1034070104',True,['PI','TIME','PI_FAST'],2,'save') [WORKED]

##### partial_t(obsid,bary,par_list,tbin_size,t1,t2,mode)

-- Plot the time series for a desired time interval.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means bin by 0.05s!
t1 - lower time boundary
t2 - upper time boundary

TEST: partial_t('1034070104',True,['PI','TIME','PI_FAST'],1,11113,11945,'show') [WORKED]

##### partial_E(obsid,bary,par_list,tbin_size,Ebin_size,E1,E2,mode)

-- Plot the time series for a desired energy range.
   [Though I don't think this will be used much. Count/s vs energy is pointless,
   since we're not folding in response matrix information here to get the flux.
   So we're just doing a count/s vs time with an energy cut to the data.]

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
E1 - lower energy boundary
E2 - upper energy boundary

TEST: partial_E('1034070104',True,['PI','TIME','PI_FAST'],1,0.05,0.3,12,'show') [WORKED]

##### partial_tE(obsid,bary,par_list,tbin_size,Ebin_size,t1,t2,E1,E2,mode)

-- Plot the time series for a desired time interval and desired energy range.

obsid - Observation ID of the object of interest (10-digit str)
bary - Whether the data is barycentered. True/False
par_list - A list of parameters we'd like to extract from the FITS file
(e.g., from eventcl, PI_FAST, TIME, PI,)
tbin_size - the size of the time bins (in seconds!)
>> e.g., tbin_size = 2 means bin by 2s
>> e.g., tbin_size = 0.05 means by in 0.05s
Ebin_size - the size of the energy bins (in keV!)
>> e.g., Ebin_size = 0.1 means bin by 0.1keV
>> e.g., Ebin_size = 0.01 means bin by 0.01keV!
t1 - lower time boundary
t2 - upper time boundary
E1 - lower energy boundary
E2 - upper energy boundary

TEST: [WORKED]

partial_tE('1034070104',True,['PI','TIME','PI_FAST'],1,0.05,11113,11945,0.3,2.7,'save')
partial_tE('1034070104',True,['PI','TIME','PI_FAST'],1,0.05,11113,11945,2.7,12,'save')



























########################### THINK ABOUT THIS LATER #############################
WILL USE PYXSPEC IN THE FUTURE ANYWAYS. DISREGARD.


>>>>>>>>>> Lv1_data_spectra <<<<<<<<<<

Functions:

##### read_redist()

--  Opening the FITS file corresponding to the redistribution matrix

    Describes the detector response

    Has CHANNEL, E_MIN, E_MAX for first card
    Has ENERG_LO, ENERG_HI, N_GRP, F_CHAN, N_CHAN, MATRIX

##### read_anc()

--  Opening the FITS file corresponding to the ancillary response

    Describes the efficiency vs energy; gives telescope area x filter efficiency
    x detector quantum efficiency vs energy

    Has ENERG_LO, ENERG_HI, SPECRESP, ENERGY, XRCAREA, QE, WINDOW, THERMALSD

TEST:
redist = read_redist()
print(redist[1].data['CHANNEL'][0:20])
print(redist[1].data['E_MIN'][0:20])
print(redist[1].data['E_MAX'][0:20])

print(redist[2].data['ENERG_LO'][0:20])
print(redist[2].data['ENERG_HI'][0:20])
print(redist[2].data['N_GRP'][0:20])
print(redist[2].data['F_CHAN'][0:20])
print(redist[2].data['N_CHAN'][0:20])
print(redist[2].data['MATRIX'][0:20])

read_anc():

print(anc[1].data['ENERG_LO'][0:20])
print(anc[1].data['ENERG_HI'][0:20])
print(anc[1].data['SPECRESP'][0:20])
print(anc[1].data['ENERGY'][0:20])
print(anc[1].data['XRCAREA'][0:20])
print(anc[1].data['QE'][0:20])
print(anc[1].data['WINDOW'][0:20])
print(anc[1].data['THERMALSD'][0:20])

print(np.min(anc[1].data['XRCAREA'][0:20]),np.max(anc[1].data['XRCAREA'][0:20]))
print(np.min(anc[1].data['QE'][0:20]),np.max(anc[1].data['QE'][0:20]))
print(np.min(anc[1].data['WINDOW'][0:20]),np.max(anc[1].data['WINDOW'][0:20]))
print(np.min(anc[1].data['THERMALSD']),np.max(anc[1].data['THERMALSD']))
